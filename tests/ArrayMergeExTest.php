<?php
namespace Tests;

use PHPUnit\Framework\TestCase;

class ArrayMergeExTest extends TestCase
{
    use ArrayMergeEx;

    /**
     * @test
     * @dataProvider arrayMergeExTestProvider
     *
     * @param array $ex
     * @param array $override
     * @param array $default
     */
    public function arrayMergeExTest(array $ex, array  $override, array  $default)
    {
        $actual = $this->arrayMergeEx($default, $override);
        $this->assertSame($ex, $actual);
    }

    public function arrayMergeExTestProvider()
    {
        return [
            // デフォルトがない
            [[
                /* 結果 */
                'a' => 67890,
                //'b' => 12345,
                //'c' => 12345, 影響なし
                'd' => null,
                'e' => [12345],
                'f' => ['h'=>12345],
                'g' => [],
            ], [
                /* オーバーライド */
                'a' => 67890, // ふつうに上書き
                //'b' => 12345, // オーバーライドしない
                'c' => $this->_UNSET, // 特殊指定：デフォルトを削除する
                'd' => null, // nullセット
                'e' => [12345], // 配列
                'f' => ['h'=>12345], // 連想配列
                'g' => [], // 空配列
            ], [
                /* デフォルト */
            ]],

            // デフォルトがスカラー値
            [[
                /* 結果 */
                'a' => 67890,
                'b' => 12345,
                //'c' => 12345, 消える
                'd' => null,
                'e' => [12345],
                'f' => ['h'=>12345],
                'g' => [],
            ], [
                /* オーバーライド */
                'a' => 67890, // ふつうに上書き
                //'b' => 12345, // オーバーライドしない
                'c' => $this->_UNSET, // 特殊指定：デフォルトを削除する
                'd' => null, // nullセット
                'e' => [12345], // 配列
                'f' => ['h'=>12345], // 連想配列
                'g' => [], // 空配列
            ], [
                /* デフォルト */
                'a' => 12345,
                'b' => 12345,
                'c' => 12345,
                'd' => 12345,
                'e' => 12345,
                'f' => 12345,
                'g' => 12345,
            ]],

            // デフォルトが空配列
            [[
                /* 結果 */
                'a' => 67890,
                'b' => [],
                //'c' => 12345, 消える
                'd' => null,
                'e' => [67890], // キーが一致するところだけ変わる
                'f' => ['h'=>67890], // キーが一致するところだけ変わる
                'g' => [],
            ], [
                /* オーバーライド */
                'a' => 67890, // ふつうに上書き
                //'b' => 12345, // オーバーライドしない
                'c' => $this->_UNSET, // 特殊指定：デフォルトを削除する
                'd' => null, // nullセット
                'e' => [67890], // 配列
                'f' => ['h'=>67890], // 連想配列
                'g' => [], // 空配列
            ], [
                /* デフォルト */
                'a' => [],
                'b' => [],
                'c' => [],
                'd' => [],
                'e' => [],
                'f' => [],
                'g' => [],
            ]],

            // デフォルトが配列
            [[
                /* 結果 */
                'a' => 67890,
                'b' => [12345, 'h'=>12345],
                //'c' => 12345, 消える
                'd' => null,
                'e' => [67890],             // 特殊指定：まるごと置き換わる
                'f' => [12345, 'h'=>67890], // キーが一致するところだけ変わる
                'g' => [12345, 'h'=>12345],
                'h' => [12345],
                // 'i' => [EXCEPTION],
            ], [
                /* オーバーライド */
                'a' => 67890, // ふつうに上書き
                //'b' => 12345, // オーバーライドしない
                'c' => $this->_UNSET, // 特殊指定：デフォルトを削除する
                'd' => null, // nullセット
                'e' => [67890],      // インデックス配列
                'f' => ['h'=>67890], // 連想配列
                'g' => [], // 空配列
                'h' => ['h'=>$this->_UNSET], // キー指定削除
                // 'i' => [$this->_UNSET], // キーなし削除（0 =>）例外とする
            ], [
                /* デフォルト */
                'a' => [12345, 'h'=>12345],
                'b' => [12345, 'h'=>12345],
                'c' => [12345, 'h'=>12345],
                'd' => [12345, 'h'=>12345],
                'e' => [12345, 'h'=>12345],
                'f' => [12345, 'h'=>12345],
                'g' => [12345, 'h'=>12345],
                'h' => [12345, 'h'=>12345],
                // 'i' => [12345, 'h'=>12345],
            ]],

            // インデックス配列を特別扱いするパターン
            [
                ['a' => [66, 77, 88]],
                ['a' => [66, 77, 88]],
                ['a' => [11, 22]],
            ],
            // インデックス配列はスカラー値のように扱われるのでまるごと置き換わる
            [
                ['a' => [66, 77]],  // こうならない [66,77,33,44,55]
                ['a' => [66, 77]],
                ['a' => [11, 22, 33, 44, 55]],
            ],
            // 連想配列のインデックス配列でも同様
            [
                [
                    ['c' => 33],
                    ['d' => 33],
                ],
                [
                    ['c' => 33],
                    ['d' => 33],
                ],
                [
                    ['a' => 11],
                    ['b' => 22],
                    ['c' => 33],
                ],
            ],
            // オーバーライドのキーが 0 から始まらないければ削除できる
            [
                [
                    0 => ['a' => 11],
                    2 => ['c' => 33],
                ],
                [
                    1 => $this->_UNSET,
                ],
                [
                    0 => ['a' => 11],
                    1 => ['b' => 22],
                    2 => ['c' => 33],
                ],
            ],
        ];
    }
}
